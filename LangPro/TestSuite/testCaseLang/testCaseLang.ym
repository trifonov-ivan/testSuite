%{
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
    #include <stdarg.h>
    #include "codeNode.h"
    #include "tclGrammarLogics.h"
    
    int tclex(void);
    void tcerror(char *);
    void tclog(char *);
%}

%name-prefix = "tc";

%union {
    int intValue;
    double doubleValue;
    char *tokname;
    codeNode *nPtr;
    codeNodeList *nodeList;
};

%token <intValue> INTEGER
%token <doubleValue> DOUBLE
%token <tokname> STRING

%token LT MT LE ME EQ AND OR MINUS PLUS MULTIPLY DIVIDE NOT

%type <intValue> sign
%type <nPtr> param func_call expr math constant
%type <nodeList> param_list module

%token NEW_LINE END_TERMINAL
%token ERROR
%token <tokname> NAME_TOKEN

%left '='
%left '->'
%%

testSuite:
    program
    | testSuite new_line program
    ;

program:
    alias module END_TERMINAL           {finalizeTestCase($2);}
    ;

module: /*this is not good, but it can be nil*/ {$$ = NULL;}
    | expr new_line                     {$$ = listWithParam($1);}
    | module expr new_line              {$$ = addNodeToList($1,$2);}
    ;

expr:
    NAME_TOKEN '=' math                 {$$ = codeNodeSetWithExpression($1, $3);}
    | NAME_TOKEN '=' NAME_TOKEN         {$$ = codeNodeSetWithVariable($1, $3);}
    | func_call                         {$$ = $1;}
    ;

alias:
    '#' NAME_TOKEN                      {forwardTestCase($2);}
    | alias param_list new_line         {registerTestCase($2);}
    ;

func_call:
    NAME_TOKEN '(' param_list ')'       {$$ = functionCall($3,$1);}
    | '(' func_call ')'                 {$$ = $2;}
    | func_call '->' func_call          {$$ = decorateCodeNodeWithCodeNode($1,$3);}
    ;

param_list: /*May be null param list */ {$$ = NULL;}
    | math                              {$$ = listWithParam($1);}
    | param_list ',' math               {$$ = addNodeToList($1,$3);}
    ;

math:
    param                               {$$ = $1;}
    | '(' math ')'                      {$$ = $2;}
    | math sign math                    {$$ = mathCall($2,$1,$3);}
    | NOT '(' math ')'                  {$$ = mathCall(signNOT,$3, NULL);}
    | MINUS math                        {$$ = mathCall(signMINUS,$2, NULL);}
    ;

param:
    constant                            {$$ = $1;}
    | func_call                         {$$ = $1;}
    | NAME_TOKEN                        {$$ = codeNodeWithVariableCall($1);}
    ;

constant:
    INTEGER                             {$$ = codeNodeForIntConstant($1);}
    | DOUBLE                            {$$ = codeNodeForDoubleConstant($1);}
    | STRING                            {$$ = codeNodeForStringConstant($1);}
    ;

sign:
    LT                                  {$$ = signLT;}
    | MT                                {$$ = signMT;}
    | LE                                {$$ = signLE;}
    | ME                                {$$ = signME;}
    | EQ                                {$$ = signEQ;}
    | AND                               {$$ = signAND;}
    | OR                                {$$ = signOR;}
    | MINUS                             {$$ = signMINUS;}
    | PLUS                              {$$ = signPLUS;}
    | MULTIPLY                          {$$ = signMULTIPLY;}
    | DIVIDE                            {$$ = signDIVIDE;}
    ;

new_line:
    NEW_LINE
    | new_line NEW_LINE
    ;
%%

void tclog(char *s) {
    fprintf(stderr, "LOG: %s\n", s);
}


void tcerror(char *s) {
    fprintf(stderr, "ERROR: %s\n", s);
}


